Codable Simple|Swift
#
struct {class_name}: Codable {

    <loop>
    var {var_name}: {var_type}?</loop>

    enum CodingKeys: String, CodingKey {
        <loop>
        case {var_name} = "{key}"</loop>
    }
}
#
Codable Extended|Swift
#
class {class_name}: Codable {

    <loop>
    var {var_name}: {var_type}?</loop>

    enum CodingKeys: String, CodingKey {
        <loop>
        case {var_name} = "{key}"</loop>
    }
    
    required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        <loop>
        {var_name} = try? container.decode({var_type}.self, forKey: .{var_name})</loop>
	}
	
	func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        <loop>
        try? container.encode({var_name}, forKey: .{var_name})</loop>
    }
}
#
Object Mapper|Swift
#
class {class_name}: Mappable {

    <loop>
    var {var_name}: {var_type}?</loop>

    required init?(map: Map) {}
    
    func mapping(map: Map) {
        <loop>
        {var_name} <- map["{key}"]</loop>
    }
}
#
Gloss|Swift
#
struct {class_name}: Glossy {
    
    <loop>
    var {var_name}: {var_type}?</loop>
    
    // Deserialization
    init?(json: JSON) {
        <loop>
        self.{var_name} = "{key}" <~~ json</loop>
    }
    
    // Serialization
    func toJSON() -> JSON? {
        return jsonify([
            <loop>
            "{key}" ~~> self.{var_name},</loop>
        ])
    }
}
#
GSON|Java
#
public class {class_name} {
    
    <loop>
    @SerializedName("{key}")
    {var_type} {var_name};
    </loop>
    
    // getters
    <loop>
    {var_type} get_{var_name}() { return {var_name}; }</loop>
    
    // settters
    <loop>
    void set_{var_name}({var_type} {var_name}) { this.{var_name} = {var_name}; }</loop>
}
#
GSON|Kotlin
#
data class {class_name} (
        
    <loop>
    @SerializedName("{key}")
    var {var_name}: {var_type}?
    </loop>
)
#
Json|Dart
#
class {class_name} {
    
    <loop>
    var {var_name}: {var_type}; </loop>
    
    {class_name}({<loop> this.{var_name},</loop> })
    
    {class_name}.fromJson(Map<String, dynamic> json) {
        <fundamental>
        {var_name} = json['{key}'];</fundamental>
        <array>
        {var_name} = json['{key}'].cast<{sub_type}>();</array>
        <derived>
        {var_name} = json['{key}'] != null ? new {var_type}.fromJson(json['{key}']) : null;</derived>
        <array-derived>
        if (json['{key}'] != null) {
            {var_name} = new {var_type}();
            json['{key}'].forEach((v) {
                {var_name}.add(new {sub_type}.fromJson(v));
            });
        }</array-derived>
    }
    
    Map<String, dynamic> toJson() {
        final Map<String, dynamic> data = new Map<String, dynamic>();
        
        <fundamental>
        data['{key}'] = {var_name};</fundamental>
        
        <array>
        data['{key}'] = {var_name};</array>
        
        <derived>
        if (this.{var_name} != null) {
            data['{key}'] = this.{var_name}.toJson();
        }</derived>
        
        <array-derived>
        if (this.{var_name} != null) {
            data['{key}'] = this.{var_name}.map((v) => v.toJson()).toList();
        }</array-derived>
            
        return data;
    }
}
#
